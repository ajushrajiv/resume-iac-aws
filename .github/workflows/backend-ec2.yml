name: backend-ec2-matchmyresume

on: 
  workflow_dispatch:

permissions:
  actions: read
  contents: read

jobs:
  backend-ec2:
    name: 'Terraform backend-ec2'
    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout GitHub Actions'
        uses: actions/checkout@v4

      - name: 'Get Previous s3-workflow Run ID'
        id: get_run_id
        run: |
            response=$(curl -s \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                "https://api.github.com/repos/${{ github.repository }}/actions/workflows/118562480/runs?per_page=1&status=completed")

            run_id=$(echo $response | jq -r '.workflow_runs[0].id')
            echo "run_id=$run_id" >> $GITHUB_ENV

      - name: 'Get Artifact ID of s3-workflow'
        id: get_artifact_id
        run: |
          # Get the artifacts for the specific workflow run
          response=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ env.run_id }}/artifacts")

          # Extract the artifact ID for s3-bucket-name
          artifact_id=$(echo $response | jq -r '.artifacts[] | select(.name == "s3-bucket-name") | .id')
          echo "Artifact ID: $artifact_id"

          # Save artifact_id to environment variable
          echo "artifact_id=$artifact_id" >> $GITHUB_ENV

      - name: 'Download Artifact'
        run: |
            echo "Downloading artifact from run ID: ${{ env.run_id }}"
            curl -L \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -o artifact.zip \
                "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${{ env.artifact_id }}/zip"

      - name: 'Unzip Artifact'
        run: unzip artifact.zip

      - name: 'Read S3 Bucket Name'
        run: |
            s3_bucket=$(cat s3_bucket_name.txt)
            echo "s3_bucket=$s3_bucket" >> $GITHUB_ENV

      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.6

      - name: 'Configure AWS Credentials'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: eu-central-1

      - name: 'Terraform Init'
        run: |
          terraform init \
            -backend-config="bucket=${{ env.s3_bucket }}" \
            -backend-config="key=${{ env.s3_bucket }}/backend-ec2/terraform.tfstate" \
            -backend-config="region=eu-central-1"
        working-directory: ./modules/ec2-backend

      - name: 'Terraform Format'
        run: terraform fmt --check
        working-directory: ./modules/ec2-backend

      - name: 'Terraform Validate'
        run: terraform validate
        working-directory: ./modules/ec2-backend

      - name: 'Check if Terraform State Exists'
        id: check_state
        run: |
          state_file="matchmyresume-backend-state-demo--0788da0f74/rds-sql/terraform.tfstate"
          aws s3 ls s3://$s3_bucket/$state_file
          if [ $? -eq 0 ]; then
            echo "State file exists."
            echo "$output"
            echo "state_exists=true" >> $GITHUB_ENV

            # Download the state file
            aws s3 cp s3://$s3_bucket/$state_file ./terraform.tfstate
            echo "state_exists=true" >> $GITHUB_ENV

            # Display the contents of the state file
            echo "Displaying contents of the state file:"
            terraform output -state=./terraform.tfstate
          else
            echo "State file does not exist."
            echo "state_exists=false" >> $GITHUB_ENV
          fi
        continue-on-error: true

      - name: 'Terraform Apply'
        env:
            TF_VAR_db_user: ${{ secrets.DATABASE_USER }}
            TF_VAR_db_password: ${{ secrets.DATABASE_PASSWORD }}
            TF_VAR_db_name: ${{ secrets.DATABASE_NAME }}
            TF_VAR_app_port: ${{ secrets.PORT }}
            TF_VAR_node_env: ${{ secrets.NODE_ENV }}
            TF_VAR_access_token_secret: ${{ secrets.ACCESS_TOKEN_SECRET }}
            TF_VAR_refresh_token_secret: ${{ secrets.REFRESH_ACCESS_TOKEN }}
            TF_VAR_db_host: ${{ env.rds_private_address }}
        run: terraform apply -auto-approve
        working-directory: ./modules/ec2-backend

      - name: 'Fetch EC2 Instance IP'
        id: get_ec2_ip
        run: |
          instance_id=$(terraform output -raw instance_id)
          ec2_ip=$(aws ec2 describe-instances --instance-ids $instance_id --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
          echo "EC2_IP=$ec2_ip" >> $GITHUB_ENV
        working-directory: ./modules/ec2-backend

      - name: 'Check RDS Connection from EC2'
        run: |
          echo "Connecting to EC2 Instance: ${{ env.EC2_IP }} and testing RDS connection"
          ssh -o StrictHostKeyChecking=no -i /path/to/your/private-key.pem ec2-user@${{ env.EC2_IP }} \
          "nc -zv ${RDS_ENDPOINT} 3306"
        env:
          RDS_ENDPOINT: ${{ env.rds_endpoint }}